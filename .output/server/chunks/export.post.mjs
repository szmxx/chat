globalThis._importMeta_=globalThis._importMeta_||{url:"file:///_entry.js",env:process.env};import{f as e,g as t,r as n}from"../index.mjs";import o from"node:path";import r from"node:fs";import i from"node:module";import{EventType as a}from"@rrweb/types";import{chromium as s}from"playwright";import"node:os";import"node:cluster";import"node:http";import"node:https";import"node:zlib";import"node:stream";import"node:buffer";import"node:util";import"node:url";import"node:net";import"fs";import"path";const d=i.createRequire(globalThis._importMeta_.url).resolve("rrweb-player"),l=o.resolve(d,"../../dist/index.js"),p=o.resolve(l,"../style.css"),h=r.readFileSync(l,"utf-8"),u=r.readFileSync(p,"utf-8"),c=2.5,m={headless:!0,resolutionRatio:.8,onProgressUpdate:e=>{},rrwebPlayer:{mouseTail:!1,insertStyleRules:[".rr-block {\n          display: none !important\n        }"]},events:[]};function V(t,n){return async function(t,n){const o="public/videos",i={...m};Object.assign(i,n),i.resolutionRatio>1&&(i.resolutionRatio=1);const d=n.events||[],l=function(e){let t=0,n=0;return e?.forEach?.((e=>{e.type===a.Meta&&(e.data.width>t&&(t=e.data.width),e.data.height>n&&(n=e.data.height))})),{width:t,height:n}}(d),p={width:Math.round(l.width*(i.resolutionRatio??1)*c),height:Math.round(l.height*(i.resolutionRatio??1)*c)};Object.assign(i?.rrwebPlayer||{},p);const w=await(await s.launch({headless:i.headless})).newContext({viewport:p,recordVideo:{dir:o,size:p}}),y=await w.newPage();await y.goto("about:blank"),await y.exposeFunction("onReplayProgressUpdate",(e=>{i?.onProgressUpdate?.(e?.payload)})),await new Promise((e=>y.exposeFunction("onReplayFinish",(()=>e())).then((()=>y.setContent(function(e,t){return`\n<html>\n  <head>\n  <style>${u}</style>\n  <style>\n    html, body {padding: 0; border: none; margin: 0;}\n    .replayer-mouse {\n      display: none;\n    }\n  </style>\n  </head>\n  <body>\n    <script>\n      ${h};\n      /*\x3c!--*/\n      const events = ${JSON.stringify(e).replace(/<\/script>/g,"<\\/script>")};\n      /*--\x3e*/\n      const userConfig = ${JSON.stringify(t?.rrwebPlayer||{})};\n      window.replayer = new rrwebPlayer({\n        target: document.body,\n        width: userConfig.width,\n        height: userConfig.height,\n        props: {\n          ...userConfig,\n          events,\n          showController: false,\n        },\n      });\n      window.replayer.addEventListener('finish', () => window.onReplayFinish());\n      window.replayer.addEventListener('ui-update-progress', (payload)=> window.onReplayProgressUpdate\n      (payload));\n      window.replayer.addEventListener('resize',()=>document.querySelector('.replayer-wrapper').style.transform = 'scale(${(t?.resolutionRatio??1)*c}) translate(-50%, -50%)');\n    <\/script>\n  </body>\n</html>\n`}(d,i))))));const g=await(y.video()?.path())||"";await w.close();const f=r.createReadStream(g);return e(t,f)}(t,{events:n})}const w=t((async e=>{const t=await n(e);return await V(e,t?.events)}));export{w as default};
