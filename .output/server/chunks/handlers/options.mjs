import{g as t,x as o,L as e,u as s,y as r,z as a}from"../../index.mjs";import{e as i}from"../utils-pure.mjs";import"node:os";import"node:cluster";import"node:http";import"node:https";import"node:zlib";import"node:stream";import"node:buffer";import"node:util";import"node:url";import"node:net";import"node:fs";import"node:path";import"fs";import"path";const n=t((async t=>{const n=o(t),p=e(n.path||"/",s().app.baseURL);let m;try{m=await globalThis.$fetch(p)}catch(t){throw r({statusCode:500,statusMessage:`Failed to read the path ${p} for og-image extraction. ${t.message}.`})}t.node.req.url=p;const u=t.context._nitro.routeRules;t.context._nitro.routeRules=void 0;const d=a(t)?.ogImage||{};if(t.context._nitro.routeRules=u,t.node.req.url=t.path,!1===d)return!1;const{defaults:l}=s()["nuxt-og-image"],h=i(p,m,d,l);if(!h)throw r({statusCode:500,statusMessage:`The path ${p} is missing the og-image payload.`});return h}));export{n as default};
