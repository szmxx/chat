import{Buffer as t}from"node:buffer";import{g as e,u as o,C as r,D as a,E as s,v as i,F as m,y as n,G as p,A as g,H as d}from"../../index.mjs";import{f as c,u}from"../utils.mjs";import{u as h}from"../rollup/provider.mjs";import"node:os";import"node:cluster";import"node:http";import"node:https";import"node:zlib";import"node:stream";import"node:util";import"node:url";import"node:net";import"node:fs";import"node:path";import"fs";import"path";import"image-size";import"satori-html";import"../utils-pure.mjs";import"@resvg/resvg-js";import"satori";const l=e((async e=>{const{runtimeBrowser:l}=o()["nuxt-og-image"],f=r(e.path).pathname;if(!f.endsWith("__og_image__/og.png"))return;const _=a(f.replace("__og_image__/og.png","")),w=await c(e,_);if(!l&&"browser"===w.provider)return s(e,i(m(e),"__nuxt_og_image__/browser-provider-not-supported.png"));const v=await h(w.provider);if(!v)throw n({statusCode:500,statusMessage:`Provider ${w.provider} is missing.`});const C=[p("/"!==w.path&&w.path?w.path:"index").replaceAll("/","-"),`og-${g(w)}`].join(":"),{enabled:b,cachedItem:x,update:j}=await u(e,"nuxt-og-image",{key:C,cacheTtl:w.cacheTtl||0,cache:w.cache,headers:!0});let y;if(x&&(y=t.from(x,"base64")),!y)try{if(y=await v.createPng(w),y){const e=t.from(y).toString("base64");await j(e)}}catch(t){throw n({statusCode:500,statusMessage:`Failed to create og image: ${t.message}`})}if(y)return b?d(e,"Cache-Control","public, max-age=31536000"):(d(e,"Cache-Control","no-cache, no-store, must-revalidate"),d(e,"Pragma","no-cache"),d(e,"Expires","0")),d(e,"Content-Type","image/png"),y;throw n({statusCode:500,statusMessage:"Failed to create og image, unknown error."})}));export{l as default};
