import{J as e}from"../index.mjs";function p(e){return e.replace(/&lt;/g,"<").replace(/&gt;/g,">").replace(/&amp;/g,"&").replace(/&cent;/g,"¢").replace(/&pound;/g,"£").replace(/&yen;/g,"¥").replace(/&euro;/g,"€").replace(/&copy;/g,"©").replace(/&reg;/g,"®").replace(/&quot;/g,'"').replace(/&#39;/g,"'").replace(/&#x27;/g,"'").replace(/&#x2F;/g,"/").replace(/&#([0-9]+);/g,((e,t)=>String.fromCharCode(Number.parseInt(t))))}function f(t,r,c,n){const a=r.match(/<script id="nuxt-og-image-options" type="application\/json">(.+?)<\/script>/)?.[1];if(!a)return!1;let o;try{const t=JSON.parse(a);Object.entries(t).forEach((([e,r])=>{r||delete t[e]})),o=e(t,c)}catch{o=c}if(!o)return!1;if(!o.description){const e=r.match(/<meta property="og:description" content="(.*?)">/)?.[1];o.description=e||r.match(/<meta name="description" content="(.*?)">/)?.[1]}const i=function(e){return Object.entries(e).forEach((([t,r])=>{"string"==typeof r&&(e[t]=p(r))})),e}(o);return e(i,{path:t},n)}export{p as d,f as e};
